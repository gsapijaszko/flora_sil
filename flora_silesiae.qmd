---
# title: "Flora Silesiae"
# author: "Grzegorz Sapijaszko"
format: 
  html:
    toc: true
  gfm: 
    toc: false
    output-file: readme.md
---

```{r}
#| label: source
#| echo: false
#| output: false
source("wszystko.R")
```

## Flora Silesiae

Historical data of the flora of Silesia based on articles published by 'Botanische Sektion' in *Jahres-Bericht der Schlesischen Gesellschaft für vaterländische Cultur*. Electronic versions of the reports can be found at [Opole Digital Library](https://www.obc.opole.pl/dlibra/publication/8613#structure) and [Silesia Digital Library](https://www.sbc.org.pl/dlibra/publication/11059#structure)


### How to use

The full data set is saved into `flora_sil.Rds` file. You can read it using:

```{r}
#| label: read data file
jahres <- readRDS(file = "data/flora_sil.Rds")
```

```{r}
#| label: total jahres
#| echo: false
total_jahres <- nrow(jahres)
```

If you prefer `.csv` data format, then you can look on `data/flora_sil.csv` file.

Let's have a look on `jahres` data frame:

:::{.column-page}
```{r}

jahres |>
  dplyr::slice_sample(n = 2) 
```
:::

Having pair of geographical coordinates -- `lon`[gitude] and `lat`[itude] -- it's very easy to convert the data frame to simple feature df, for example using `sf` package.

```{r}
jahres <- jahres |>
  subset(!is.na(lon)) |>
  sf::st_as_sf(coords = c("lon", "lat"), crs = "EPSG:4326")
```

Now it's quite easy to run any spatial analysis like distribution, or density. Let's look on distribution of malvas:

```{r}
malvas <- jahres |>
  subset(grepl("Malva", accepted_name)) |>
  subset(select = c("accepted_name", "geometry"))
```

And plot it on simple map using `tmap` package:

```{r}
#| label: tmap
#| warning: false
#| message: false
#| error: false
#| code-fold: true
#| 
boundaries <- geodata::gadm(country = c("POL", "DEU", "CZE", "SVK"), level=1, path = "data") |>
  sf::st_as_sf() |>
  sf::st_transform(crs = sf::st_crs(malvas)) |>
  sf::st_crop(sf::st_buffer(sf::st_as_sfc(sf::st_bbox(malvas)), dist = 10000))

tm <- tmap::tm_shape(boundaries) +
  tmap::tm_polygons("COUNTRY", palette = c("white"), legend.show = FALSE) +
  tmap::tm_shape(malvas) +
  tmap::tm_symbols(col = "accepted_name", title.col = "", palette = "Paired", size = 0.6, shape = 16) +
  tmap::tm_legend(
    legend.width = 1.1,
    legend.text.size = 0.7,
    legend.bg.color = "white")
```

```{r}
#| label: tmap_save
#| echo: false
#| message: false

tmap::tmap_save(tm, "malvas.png", height = 4)
```



![Malvas distribution](malvas.png)

In Poland, occurrence of the species is usually shown in ATPOL squares. You can get the ATPOL grid by spatial joining them with coordinates provided by `jahres` data set. For that we will use `atpolR` package. As the ATPOL grid is provided in `EPSG:2180` reference system, we have to transform our `malvas` set to it, prior to run spatial join. And secondly, as it's used only in Poland, we have to filter out only location within Poland's border.

```{r}
#| label: atpol

atpol10 <- atpolR::atpol10k()

pl_border <- atpolR::boundaryPL() |>
  sf::st_polygonize() |>
  sf::st_transform(crs = sf::st_crs(atpol10))

malvas <- malvas |>
  sf::st_transform(crs = sf::st_crs(atpol10))

malvas |>
  sf::st_filter(pl_border) |>
  sf::st_join(atpolR::atpol10k()) |>
  sf::st_drop_geometry() |>
  subset(select = c("accepted_name", "Name")) |>
  dplyr::slice_sample(n = 8) |>
  dplyr::arrange(accepted_name, Name)

```

### How to participate

If you wish to add some records, or change existing, please fork the project and use pull request. The source files, divided by years, are located in the `source` directory. Entries are provided as data.frame structure, like:

```{r eval=FALSE}
jahres <- data.frame(
  species = "Cystopteris fragilis",
  citation = "@schalowErgebnisseDurchforschungSchlesischen1934",
  entry = "Cystopteris fragilis Naumburg a. B.: Schloßpark (Tscheppe)!; [...]",
  lon = 15.24453, 
  lat = 51.80259,
  comments = "Nowogród Bobrzański, park zamkowy (Wzgórze Zamkowe)"
) |> rbind(jahres)
```

Bibliography is provided as `bibentry` using `RefManageR` package

```{r eval=FALSE}
bib <- RefManageR::as.BibEntry(
  c(
    bibtype = "article",
    key  = "schalowErgebnisseDurchforschungSchlesischen1934",
    author = "Emil Schalow",
    title = "Ergebnisse der Durchforschung der schlesischen Gefässpflanzenwelt im Jahre 1933",
    journal = "Jahres-Bericht der Schlesischen Gesellschaft für vaterländische Cultur. 1933, Jg.106",
    date = "1934",
    volume = "106", 
    pages = "140--156")
)
```

There is additional file, `accepted_names.R`, located in `source` directory, which provides the normalization of the species names provided by authors to common, accepted names of species, like:

```{r}
#| eval: false
#| 
an <- c(
  "Abutilon avicennae", "Abutilon theophrasti Medik.",
  "Acer campestre", "Acer campestre L.", 
  [...]
```

Feel free to participate, spot an error or add missing data. If you recognize some locations where geographical coordinates are missing -- please add.

#### Tools and resources used to find the coordinates

+ [Mapster](http://igrek.amzp.pl/)
+ [Kartenforum](https://kartenforum.slub-dresden.de/)
+ [Arcanum Maps](https://maps.arcanum.com/en/map/europe-19century-secondsurvey/)

Two map layers provided by Urząd Marszałkowski Województwa Dolnośląskiego as ArcGIS REST service (can be used in QGIS):

+ [Karte des Deutschen Reiches 100k](https://geoportal.dolnyslask.pl/gprest/services/UMWD_DEUTSCHEN_100/MapServer/)
+ [Messtischblatt 25k](https://geoportal.dolnyslask.pl/gprest/services/UMWD_Messtischblat_nowsze/MapServer/)

[QGIS](https://qgis.org) with plugins:

+ [OSM place search](https://github.com/xcaeag/Nominatim-Qgis-Plugin) and 
+ [Lat Lon Tools](https://github.com/NationalSecurityAgency/qgis-latlontools-plugin).

### Data set content

Full record sets from few articles and some records from the others, in total `r total_jahres` records (species - localization) including `r nrow(jahres)` with coordinates. Data density in ATPOL squares is shown on the below picture:

![Data density in ATPOL squares (10x10 km)](atpol_plot.png)

And the number of records per year:

```{r}
#| label: barplot
#| echo: false
#| message: false
#| output: false
#| 
grDevices::png(filename = "barplot.png", width = 1200)
c <- jahres |>
  dplyr::group_by(year) |>
  dplyr::count()
barplot(n ~ year, data = c) 
grDevices::dev.off()
```

![](barplot.png)

### Bibliography:

```{r}
#| label: bibliography
#| echo: false
#| output: false
#| 
bibliography |>
  RefManageR::as.BibEntry() |>
  RefManageR::WriteBib(file = "bibliography.bib")

bibliography <- RefManageR::ReadBib("bibliography.bib")
# 
RefManageR::NoCite(bibliography, "schalowErgebnisseDurchforschungSchlesischen1934")
RefManageR::NoCite(bibliography, "wimmerBerichtUberVerhandlungen1850")
RefManageR::NoCite(bibliography, "wimmerNeueUndSeltenere1850")
RefManageR::NoCite(bibliography, "schalowErgebnisseDurchforschungSchlesischen1935")
RefManageR::NoCite(bibliography, "schalowErgebnisseDurchforschungSchlesischen1936")

RefManageR::BibOptions(sorting = "ynt")
# 

```

#### WIP
```{r}
#| label: wip
#| echo: false
bibliography[key = "schalowErgebnisseSchlesischenPhanerogamenforschung1933"]
```

#### Done

```{r}
#| label: done
#| echo: false
RefManageR::PrintBibliography(bibliography)
```
